/** * * * @author      P.J. Onori * @version     0.1 */package com.openflux.layout.organizers	{	import flash.display.*;	import com.openflux.layout.elements.*;	public class WaveOrganizer extends LayoutOrganizer implements ILayoutOrganizer	{				private var _frequency:Number;		private var _waveFunction:String;		private var _function:Function=Math.sin;				public static const SINE:String = "sineFunction";		public static const COSINE:String = "cosineFunction";		public static const TAN:String = "tanFunction";		public static const ARCSINE:String = "arcsineFunction";		public static const ARCCOSINE:String = "arccosineFunction";		public static const ARCTAN:String = "arctanFunction";		/**		 * Mutator for waveFunction property		 *		 * @param	value	Wave function of layout organizer   		 */		public function set waveFunction(value:String):void		{			switch(value)			{				case WaveOrganizer.SINE:					_waveFunction=value;					_function=Math.sin;					break;				case WaveOrganizer.COSINE:					_waveFunction=value;					_function=Math.cos;					break;				case WaveOrganizer.TAN:					_waveFunction=value;					_function=Math.tan;					break;				case WaveOrganizer.ARCSINE:					_waveFunction=value;					_function=Math.asin;					break;				case WaveOrganizer.ARCCOSINE:					_waveFunction=value;					_function=Math.acos;					break;				case WaveOrganizer.ARCTAN:					_waveFunction=value;					_function=Math.atan;					break;			}			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		 * Accessor for waveFunction property		 *		 * @return	Wave function in string form   		 */		public function get waveFunction():String		{			return _waveFunction;		}		/**		 * Mutator for frequency property		 *		 * @param	value	Wave frequency of layout organizer   		 */		public function set frequency(value:Number):void		{			this._frequency=value;			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		 * Accessor for frequency property		 *		 * @return	Frequency of wave   		 */		public function get frequency():Number		{			return _frequency;		}				/**		 * Constructor for WaveOrganizer 		 *		 * @param  target  DisplayObject where all layout elements will reside		 * @param  width  total width of the entire grid		 * @param  height  total height of the entire grid		 * @param  xOffset  x position of grid		 * @param  yOffset  y position of grid		 * @param  frequency  frequency of wave function		 * @param  waveFunction  type of wave function (sin, cos, tan)		 */		public function WaveOrganizer(target:Sprite, width:Number, height:Number, xOffset:Number=0, yOffset:Number=0, frequency:Number=1, waveFunction:String=WaveOrganizer.SINE):void		{			super(target);			this._cells = new Array();			this._width=width;			this._height=height;			this._x=xOffset;			this._y=yOffset;			this._frequency=frequency;			this.waveFunction=waveFunction;		}				/**		 * Adds DisplayObject to layout in next available position		 *		 * @param  object  DisplayObject to add to organizer		 * @param  moveToCoordinates  automatically move DisplayObject to corresponding cell's coordinates		 * @param  addToStage  adds a child DisplayObject instance to target's DisplayObjectContainer instance		 */		public function addToLayout(object:DisplayObject,  moveToCoordinates:Boolean=true, addToStage:Boolean=true):void		{						var cell:WaveCell = new WaveCell(0,0,object);			this._cells.push(cell);			var len:int = this._cells.length;			for(var i:uint=0; i<len; i++)			{				var c:WaveCell = this._cells[i];				c.x = (i*(this._width/len))+_x;				c.y = (_function(Math.PI*(i+1)/(len/2))*(this._height/2))+(this._height/2)+_y;							}						if(moveToCoordinates)			{				this.apply();			}						if(addToStage)			{				this._target.addChild(object);			}		}				/**		 * Removes specified cell and its link from layout organizer and adjusts layout appropriately		 *		 * @param  cell  cell object to remove		 */		public override function removeCell(cell:Cell):void		{			super.removeCell(cell);			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		* Clones the current object's properties (does not include links to DisplayObjects)		* 		* @return WaveOrganizer clone of object		*/		public function clone():WaveOrganizer		{			return new WaveOrganizer(_target, _width, _height, _x, _y, _frequency, _waveFunction);		}				/*PRIVATE METHODS		-------------------------------------------------*/		protected override function adjustLayout():void		{						var len:int = this._cells.length;			for(var i:uint=0; i<len; i++)			{				var c:Cell = this._cells[i];				c.x = (i*(this._width/len))+_x;				c.y = (_function(Math.PI*(i+1)/(len/2)*_frequency)*(this._height/2))+(this._height/2)+_y;			}		}			}}