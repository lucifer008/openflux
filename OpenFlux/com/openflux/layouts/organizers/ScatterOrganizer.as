/** * * * @author      P.J. Onori * @version     0.1 */package com.openflux.layout.organizers{	import flash.display.*;	import com.openflux.layout.elements.ScatterCell;		public class ScatterOrganizer extends LayoutOrganizer implements ILayoutOrganizer	{				private var _tempX:Number=0;		private var _tempY:Number=0;		private var _tempWidth:Number=0;		private var _tempHeight:Number=0;				private var _jitter:Number;		private var _jitterRotation:Boolean;				/**		 * Mutator for x property		 *		 * @param	value	Global X position of layout organizer   		 */		public override function set x(value:Number):void		{			this._tempX=_x;			this._x=value;			this.adjustX();			if(_autoAdjust) this.apply(_tweenFunction);			this._tempX=value;		}				/**		 * Mutator for y property		 *		 * @param	value	Global Y position of layout organizer   		 */		public override function set y(value:Number):void		{			this._tempY=_y;			this._y=value;			this.adjustY();			if(_autoAdjust) this.apply(_tweenFunction);			this._tempY=value;		}				/**		 * Mutator for width property		 *		 * @param	value	Global width dimension of layout organizer   		 */		public override function set width(value:Number):void		{			this._tempWidth=_width;			this._width=value;			this.adjustWidth();			if(_autoAdjust) this.apply(_tweenFunction);			this._tempWidth=value;		}				/**		 * Mutator for height property		 *		 * @param	value	Global height dimension of layout organizer   		 */		public override function set height(value:Number):void		{			this._tempHeight=_height;			this._height=value;			this.adjustHeight();			if(_autoAdjust) this.apply(_tweenFunction);			this._tempHeight=value;		}				/**		 * Mutator for jitter property		 *		 * @param	value	Global jitter value of layout organizer   		 */		public function set jitter(value:Number):void		{			this._jitter=value;		}				/**		 * Accessor for jitter property		 *		 * @return	Global jitter value of layout organizer   		 */		public function get jitter():Number		{			return this._jitter;		}				/**		 * Constructor for ScatterOrganizer 		 *		 * @param  target  DisplayObject where all layout elements will reside		 * @param  width  total width of the entire scatter		 * @param  height  total height of the entire scatter		 * @param  jitter  jitter multiplier of scatter		 * @param  xOffset  x position of scatter		 * @param  yOffset  y position of scatter		 * @param  jitterRotation  jitter rotation toggle multiplier of scatter		 */		public function ScatterOrganizer(target:Sprite, width:uint, height:uint, jitter:Number=1, xOffset:Number=0, yOffset:Number=0, jitterRotation:Boolean=false):void		{			super(target);			this._width = width;			this._tempWidth=width			this._height = height;			this._tempHeight=height;			this._x = xOffset;			this._y = yOffset;			this._tempX=xOffset;			this._tempY=yOffset;			this._jitter=jitter;			this._jitterRotation=jitterRotation;			this._cells = new Array();		}					/**		 * Adds DisplayObject to layout in next available position		 *		 * @param  object  DisplayObject to add to organizer		 * @param  moveToCoordinates  automatically move DisplayObject to corresponding cell's coordinates		 * @param  addToStage  adds a child DisplayObject instance to target's DisplayObjectContainer instance		 */			public function addToLayout(object:DisplayObject, moveToCoordinates:Boolean=true, addToStage:Boolean=true):void		{			var p:int = (Math.round(Math.random())) ? -1:1;			var xPos:Number = (_width/2+((Math.random()*_width*_jitter)/2)*p)+_x;			p = (Math.round(Math.random())) ? -1:1;			var yPos:Number = (_height/2+((Math.random()*_height*_jitter)/2)*p)+_y;			p = (Math.round(Math.random())) ? -1:1;			var cell:ScatterCell = new ScatterCell(xPos,yPos,(_jitterRotation)?(Math.random()*p*360):0,object);						this._cells.push(cell);						if(moveToCoordinates) 			{				cell.link.x=cell.x; 				cell.link.y=cell.y;				cell.link.rotation=cell.rotation;			}			if(addToStage) this._target.addChild(cell.link);		}				/**		 * Applies all layout property values to a specified cells/display objects in the collection		 *		 * @param  item  display object 		 * @param  tweenFunction  function with a Cell parameter for managing the motion of the cell object		 */		public override function applyItem(item:DisplayObject, tweenFunction:Function=null):void		{			var cell:ScatterCell = this.getCellByLink(item) as ScatterCell;						if(!cell) return;						if(tweenFunction!=null) tweenFunction(cell);			else {				cell.link.x=cell.x;				cell.link.y=cell.y;				cell.link.rotation=cell.rotation;			}		}				/**		 * Applies all layout property values to all cells/display objects in the collection		 *		 * @param  tweenFunction  function with a Cell parameter for managing the motion of the cell object		 */		public override function apply(tweenFunction:Function=null):void		{			var len:uint = this._cells.length;			for(var i:int=0; i<len; i++)			{				if(tweenFunction!=null) tweenFunction(this._cells[i]);				else if(_tweenFunction!=null) _tweenFunction(this._cells[i]);				else {					this._cells[i].link.x=this._cells[i].x;					this._cells[i].link.y=this._cells[i].y;					this._cells[i].link.rotation=this._cells[i].rotation;				}			}		}				/**		 * Re-scatters layout and adjusts cell links appropriately		 *		 * @param  tweenFunction  function with a Cell parameter for managing the motion of the cell object		 */		public function scatter(tweenFunction:Function=null):void		{			var p:int;			var xPos:Number;			var yPos:Number;			var len:uint = this._cells.length;			for(var i:int=0; i<len; i++)			{				p = (Math.round(Math.random())) ? -1:1;				xPos = (_width/2+((Math.random()*_width*_jitter)/2)*p)+_x;				p = (Math.round(Math.random())) ? -1:1;				yPos = (_height/2+((Math.random()*_height*_jitter)/2)*p)+_y;								this._cells[i].x=xPos;				this._cells[i].y=yPos;			}			this.apply(tweenFunction);		}				/**		* Clones the current object's properties (does not include links to DisplayObjects)		* 		* @return ScatterOrganizer clone of object		*/		public function clone():ScatterOrganizer		{			return new ScatterOrganizer(_target, _width, _height, _jitter, _x, _y, _jitterRotation);		}				/*PRIVATE METHODS		-------------------------------------------------*/		private function adjustWidth():void		{			var len:uint=this._cells.length;			var r:Number = (_width/(_tempWidth));			for(var i:uint=0; i<len; i++)			{				_cells[i].x=(r*(_cells[i].x-_x))+_x;			}		}				private function adjustHeight():void		{			var len:uint=this._cells.length;			var r:Number = (_height/(_tempHeight));			for(var i:uint=0; i<len; i++)			{				_cells[i].y=(r*(_cells[i].y-_y))+_y;			}		}				private function adjustX():void		{			var len:uint=this._cells.length;			for(var i:uint=0; i<len; i++)			{				_cells[i].x=(_cells[i].x)+(_x-_tempX);			}		}				private function adjustY():void		{			var len:uint=this._cells.length;			for(var i:uint=0; i<len; i++)			{				_cells[i].y=(_cells[i].y)+(_y-_tempY);			}		}		}}